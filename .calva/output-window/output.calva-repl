; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: npx shadow-cljs -d cider/cider-nrepl:0.26.0 watch :app
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉shadow.user꞉> 
; Creating cljs repl session...
; Connecting cljs repl: shadow-cljs...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs, repl: :app
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Jack-in done.
cljs꞉cljs.user꞉> 
260
cljs꞉la.vectors꞉> 
260
cljs꞉la.vectors꞉> 
-100
cljs꞉la.vectors꞉> 
-180
cljs꞉la.vectors꞉> 
0.5
cljs꞉la.vectors꞉> 
-180
cljs꞉la.vectors꞉> 
nil
; ------ REPL Error while processing ---------------------------------------------
; (ns la.vectors
  (:require [la.math :refer [abs]]))
Invalid :refer, var la.math/abs does not exist
cljs꞉la.vectors꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:8
 Use of undeclared Var la.vectors/abs
--------------------------------------------------------------------------------

cljs꞉la.vectors꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:8
 Use of undeclared Var la.latex/abs
--------------------------------------------------------------------------------

cljs꞉la.latex꞉> 
nil
cljs꞉la.vectors꞉> 
260
cljs꞉la.vectors꞉> 
#'la.vectors/scalar
cljs꞉la.vectors꞉> 
{:magnitude -2, :direction 260}
cljs꞉la.vectors꞉> 
#'la.vectors/scalar
cljs꞉la.vectors꞉> 
{:magnitude 2, :direction 260}
cljs꞉la.vectors꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:2
 Use of undeclared Var la.vectors-test/run-tests
--------------------------------------------------------------------------------

cljs꞉la.vectors-test꞉> 
nil
cljs꞉la.vectors-test꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
Cannot read properties of undefined (reading 'call')
cljs꞉la.vectors-test꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
Cannot read properties of undefined (reading 'call')
cljs꞉la.vectors-test꞉> 
nil
cljs꞉la.vectors-test꞉> 
#'la.vectors-test/scalar-multiplication-test
cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


FAIL in (scalar-multiplication-test) (repl-input.cljs:2:7)

expected: (= (vectors/scalar (- (/ 1 2)) {:magnitude 4, :direction 80}) {:magnitude 2, :direction 260})

  actual: (not (= {:magnitude -2, :direction -100} {:magnitude 2, :direction 260}))


Ran 1 tests containing 1 assertions.

1 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
#'la.vectors/scalar
cljs꞉la.vectors꞉> 
{:magnitude 2, :direction 260}
cljs꞉la.vectors꞉> 

Testing la.vectors-test


Ran 1 tests containing 1 assertions.

0 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
Cannot read properties of undefined (reading 'scalar')
cljs꞉la.vectors꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
Cannot set properties of undefined (setting 'scalar')
cljs꞉la.vectors꞉> 
nil
cljs꞉la.vectors꞉> 
#'la.vectors/scalar
cljs꞉la.vectors꞉> 
{:magnitude 3, :direction 480}
cljs꞉la.vectors꞉> 
360
cljs꞉la.vectors꞉> 
120
cljs꞉la.vectors꞉> 
nil
; ------ REPL Error while processing ---------------------------------------------
; (scalar (- (/ 1 2))
 {:magnitude 6
  :direction 300})
no source by provide: la.vectors
{:provide la.vectors}
ExceptionInfo: no source by provide: la.vectors
	shadow.build.data/get-source-id-by-provide (data.clj:186)
	shadow.build.data/get-source-id-by-provide (data.clj:183)
	shadow.build.data/get-source-by-provide (data.clj:189)
	shadow.build.data/get-source-by-provide (data.clj:188)
	shadow.cljs.repl/repl-compile/fn--15628/fn--15629 (repl.clj:437)
	shadow.cljs.repl/repl-compile/fn--15628 (repl.clj:413)
	shadow.cljs.repl/repl-compile (repl.clj:411)
	shadow.cljs.repl/repl-compile (repl.clj:408)
	shadow.cljs.repl/process-read-result (repl.clj:499)
	shadow.cljs.repl/process-read-result (repl.clj:475)
	shadow.cljs.repl/process-input (repl.clj:659)
	shadow.cljs.repl/process-input (repl.clj:637)
	shadow.cljs.devtools.server.worker.impl/eval16193/fn--16196 (impl.clj:685)
	clojure.lang.MultiFn.invoke (MultiFn.java:234)
	shadow.cljs.devtools.server.util/server-thread/fn--15837/fn--15838/fn--15846 (util.clj:284)
	shadow.cljs.devtools.server.util/server-thread/fn--15837/fn--15838 (util.clj:283)
	shadow.cljs.devtools.server.util/server-thread/fn--15837 (util.clj:256)
	java.lang.Thread.run (Thread.java:833)

cljs꞉la.vectors꞉> 
nil
cljs꞉la.vectors꞉> 
#'la.vectors/scalar
cljs꞉la.vectors꞉> 
{:magnitude 3, :direction 300}
cljs꞉la.vectors꞉> 
{:magnitude 2, :direction 300}
cljs꞉la.vectors꞉> 
nil
cljs꞉la.vectors-test꞉> 
#'la.vectors-test/scalar-multiplication-test
cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


FAIL in (scalar-multiplication-test) (repl-input.cljs:2:7)

expected: (= (vectors/scalar (- (/ 1 2)) {:magnitude 4, :direction 80}) {:magnitude 2, :direction 260})

  actual: (not (= {:magnitude 2, :direction 80} {:magnitude 2, :direction 260}))


Ran 1 tests containing 2 assertions.

1 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
nil
cljs꞉la.vectors꞉> 
#'la.vectors/scalar
cljs꞉la.vectors꞉> 
nil
cljs꞉la.vectors-test꞉> 
#'la.vectors-test/scalar-multiplication-test
cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


FAIL in (scalar-multiplication-test) (repl-input.cljs:6:7)

expected: (= (vectors/scalar (- (/ 1 3)) {:magnitude 6, :direction 300}) {:magnitude 2, :direction 300})

  actual: (not (= {:magnitude 2, :direction 420} {:magnitude 2, :direction 300}))


Ran 1 tests containing 2 assertions.

1 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
#'la.vectors-test/scalar-multiplication-test
cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


Ran 1 tests containing 2 assertions.

0 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
5.25
cljs꞉la.app꞉> 
-5.599999999999994
cljs꞉la.app꞉> 
69.62599999999998
cljs꞉la.app꞉> 
-79.03
cljs꞉la.app꞉> 
4.5
cljs꞉la.app꞉> 
43.81800000000001
cljs꞉la.app꞉> 
194.4
cljs꞉la.app꞉> 
143.46
cljs꞉la.app꞉> 
-143.46
cljs꞉la.app꞉> 
-156.18200000000002
cljs꞉la.app꞉> 
249.418
cljs꞉la.app꞉> 
5.600000000000001
cljs꞉la.app꞉> 
50
cljs꞉la.app꞉> 
150
cljs꞉la.app꞉> 
-150
cljs꞉la.app꞉> 
#'la.vectors/endpoint
cljs꞉la.vectors꞉> 
[1 -2]
cljs꞉la.vectors꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:2:11
 Use of undeclared Var la.vectors-test/endpoint
--------------------------------------------------------------------------------

cljs꞉la.vectors-test꞉> 
nil
cljs꞉la.vectors-test꞉> 
#'la.vectors-test/scalar-multiplication-test
cljs꞉la.vectors-test꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:2:11
 Use of undeclared Var la.vectors-test/endpoint
--------------------------------------------------------------------------------

cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


Ran 1 tests containing 2 assertions.

0 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:2:11
 Use of undeclared Var la.vectors-test/endpoint
--------------------------------------------------------------------------------

cljs꞉la.vectors-test꞉> 
nil
cljs꞉la.vectors-test꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:2:11
 Use of undeclared Var la.vectors-test/endpoint
--------------------------------------------------------------------------------

cljs꞉la.vectors-test꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:2:11
 Use of undeclared Var la.vectors-test/endpoint
--------------------------------------------------------------------------------

cljs꞉la.vectors-test꞉> 
#'la.vectors/endpoint
cljs꞉la.vectors꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:2:11
 Use of undeclared Var la.vectors-test/endpoint
--------------------------------------------------------------------------------

cljs꞉la.vectors-test꞉> 
nil
cljs꞉la.vectors-test꞉> 
#'la.vectors-test/endpoint-test
cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


Ran 2 tests containing 3 assertions.

0 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
[5 -2]
cljs꞉la.vectors꞉> 
#'la.vectors-test/endpoint-test
cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


Ran 2 tests containing 4 assertions.

0 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
{:magnitude 15, :direction 160}
cljs꞉la.vectors꞉> 
#'la.vectors-test/scalar-multiplication-test
cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


Ran 2 tests containing 5 assertions.

0 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
[-2 -3]
cljs꞉la.vectors꞉> 
#'la.vectors-test/endpoint-test
cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


Ran 2 tests containing 6 assertions.

0 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
[2 1]
cljs꞉la.vectors꞉> 
#'la.vectors-test/endpoint-test
cljs꞉la.vectors-test꞉> 

Testing la.vectors-test


Ran 2 tests containing 7 assertions.

0 failures, 0 errors.

nil
cljs꞉la.vectors-test꞉> 
